/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchLayoutRouteImport } from './routes/_search-layout/route'
import { Route as LayoutRouteImport } from './routes/_layout/route'
import { Route as AppLayoutRouteImport } from './routes/_app-layout/route'
import { Route as LayoutLoginRouteImport } from './routes/_layout/login/route'
import { Route as AppLayoutDictionaryEditWordIdImport } from './routes/_app-layout/dictionary/edit/$wordId'

// Create Virtual Routes

const SearchLayoutIndexLazyImport = createFileRoute('/_search-layout/')()
const AppLayoutSettingsRouteLazyImport = createFileRoute(
  '/_app-layout/settings',
)()
const AppLayoutDecksRouteLazyImport = createFileRoute('/_app-layout/decks')()
const AppLayoutDictionaryAddRouteLazyImport = createFileRoute(
  '/_app-layout/dictionary/add',
)()

// Create/Update Routes

const SearchLayoutRouteRoute = SearchLayoutRouteImport.update({
  id: '/_search-layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRouteRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutRouteRoute = AppLayoutRouteImport.update({
  id: '/_app-layout',
  getParentRoute: () => rootRoute,
} as any)

const SearchLayoutIndexLazyRoute = SearchLayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchLayoutRouteRoute,
} as any).lazy(() =>
  import('./routes/_search-layout/index.lazy').then((d) => d.Route),
)

const AppLayoutSettingsRouteLazyRoute = AppLayoutSettingsRouteLazyImport.update(
  {
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AppLayoutRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/_app-layout/settings/route.lazy').then((d) => d.Route),
)

const AppLayoutDecksRouteLazyRoute = AppLayoutDecksRouteLazyImport.update({
  id: '/decks',
  path: '/decks',
  getParentRoute: () => AppLayoutRouteRoute,
} as any).lazy(() =>
  import('./routes/_app-layout/decks/route.lazy').then((d) => d.Route),
)

const LayoutLoginRouteRoute = LayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LayoutRouteRoute,
} as any).lazy(() =>
  import('./routes/_layout/login/route.lazy').then((d) => d.Route),
)

const AppLayoutDictionaryAddRouteLazyRoute =
  AppLayoutDictionaryAddRouteLazyImport.update({
    id: '/dictionary/add',
    path: '/dictionary/add',
    getParentRoute: () => AppLayoutRouteRoute,
  } as any).lazy(() =>
    import('./routes/_app-layout/dictionary/add/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppLayoutDictionaryEditWordIdRoute =
  AppLayoutDictionaryEditWordIdImport.update({
    id: '/dictionary/edit/$wordId',
    path: '/dictionary/edit/$wordId',
    getParentRoute: () => AppLayoutRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app-layout': {
      id: '/_app-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_search-layout': {
      id: '/_search-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SearchLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LayoutLoginRouteImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_app-layout/decks': {
      id: '/_app-layout/decks'
      path: '/decks'
      fullPath: '/decks'
      preLoaderRoute: typeof AppLayoutDecksRouteLazyImport
      parentRoute: typeof AppLayoutRouteImport
    }
    '/_app-layout/settings': {
      id: '/_app-layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppLayoutSettingsRouteLazyImport
      parentRoute: typeof AppLayoutRouteImport
    }
    '/_search-layout/': {
      id: '/_search-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SearchLayoutIndexLazyImport
      parentRoute: typeof SearchLayoutRouteImport
    }
    '/_app-layout/dictionary/add': {
      id: '/_app-layout/dictionary/add'
      path: '/dictionary/add'
      fullPath: '/dictionary/add'
      preLoaderRoute: typeof AppLayoutDictionaryAddRouteLazyImport
      parentRoute: typeof AppLayoutRouteImport
    }
    '/_app-layout/dictionary/edit/$wordId': {
      id: '/_app-layout/dictionary/edit/$wordId'
      path: '/dictionary/edit/$wordId'
      fullPath: '/dictionary/edit/$wordId'
      preLoaderRoute: typeof AppLayoutDictionaryEditWordIdImport
      parentRoute: typeof AppLayoutRouteImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteRouteChildren {
  AppLayoutDecksRouteLazyRoute: typeof AppLayoutDecksRouteLazyRoute
  AppLayoutSettingsRouteLazyRoute: typeof AppLayoutSettingsRouteLazyRoute
  AppLayoutDictionaryAddRouteLazyRoute: typeof AppLayoutDictionaryAddRouteLazyRoute
  AppLayoutDictionaryEditWordIdRoute: typeof AppLayoutDictionaryEditWordIdRoute
}

const AppLayoutRouteRouteChildren: AppLayoutRouteRouteChildren = {
  AppLayoutDecksRouteLazyRoute: AppLayoutDecksRouteLazyRoute,
  AppLayoutSettingsRouteLazyRoute: AppLayoutSettingsRouteLazyRoute,
  AppLayoutDictionaryAddRouteLazyRoute: AppLayoutDictionaryAddRouteLazyRoute,
  AppLayoutDictionaryEditWordIdRoute: AppLayoutDictionaryEditWordIdRoute,
}

const AppLayoutRouteRouteWithChildren = AppLayoutRouteRoute._addFileChildren(
  AppLayoutRouteRouteChildren,
)

interface LayoutRouteRouteChildren {
  LayoutLoginRouteRoute: typeof LayoutLoginRouteRoute
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutLoginRouteRoute: LayoutLoginRouteRoute,
}

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(
  LayoutRouteRouteChildren,
)

interface SearchLayoutRouteRouteChildren {
  SearchLayoutIndexLazyRoute: typeof SearchLayoutIndexLazyRoute
}

const SearchLayoutRouteRouteChildren: SearchLayoutRouteRouteChildren = {
  SearchLayoutIndexLazyRoute: SearchLayoutIndexLazyRoute,
}

const SearchLayoutRouteRouteWithChildren =
  SearchLayoutRouteRoute._addFileChildren(SearchLayoutRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof SearchLayoutRouteRouteWithChildren
  '/login': typeof LayoutLoginRouteRoute
  '/decks': typeof AppLayoutDecksRouteLazyRoute
  '/settings': typeof AppLayoutSettingsRouteLazyRoute
  '/': typeof SearchLayoutIndexLazyRoute
  '/dictionary/add': typeof AppLayoutDictionaryAddRouteLazyRoute
  '/dictionary/edit/$wordId': typeof AppLayoutDictionaryEditWordIdRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutRouteRouteWithChildren
  '/login': typeof LayoutLoginRouteRoute
  '/decks': typeof AppLayoutDecksRouteLazyRoute
  '/settings': typeof AppLayoutSettingsRouteLazyRoute
  '/': typeof SearchLayoutIndexLazyRoute
  '/dictionary/add': typeof AppLayoutDictionaryAddRouteLazyRoute
  '/dictionary/edit/$wordId': typeof AppLayoutDictionaryEditWordIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app-layout': typeof AppLayoutRouteRouteWithChildren
  '/_layout': typeof LayoutRouteRouteWithChildren
  '/_search-layout': typeof SearchLayoutRouteRouteWithChildren
  '/_layout/login': typeof LayoutLoginRouteRoute
  '/_app-layout/decks': typeof AppLayoutDecksRouteLazyRoute
  '/_app-layout/settings': typeof AppLayoutSettingsRouteLazyRoute
  '/_search-layout/': typeof SearchLayoutIndexLazyRoute
  '/_app-layout/dictionary/add': typeof AppLayoutDictionaryAddRouteLazyRoute
  '/_app-layout/dictionary/edit/$wordId': typeof AppLayoutDictionaryEditWordIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/decks'
    | '/settings'
    | '/'
    | '/dictionary/add'
    | '/dictionary/edit/$wordId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/decks'
    | '/settings'
    | '/'
    | '/dictionary/add'
    | '/dictionary/edit/$wordId'
  id:
    | '__root__'
    | '/_app-layout'
    | '/_layout'
    | '/_search-layout'
    | '/_layout/login'
    | '/_app-layout/decks'
    | '/_app-layout/settings'
    | '/_search-layout/'
    | '/_app-layout/dictionary/add'
    | '/_app-layout/dictionary/edit/$wordId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppLayoutRouteRoute: typeof AppLayoutRouteRouteWithChildren
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren
  SearchLayoutRouteRoute: typeof SearchLayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRouteRoute: AppLayoutRouteRouteWithChildren,
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
  SearchLayoutRouteRoute: SearchLayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app-layout",
        "/_layout",
        "/_search-layout"
      ]
    },
    "/_app-layout": {
      "filePath": "_app-layout/route.tsx",
      "children": [
        "/_app-layout/decks",
        "/_app-layout/settings",
        "/_app-layout/dictionary/add",
        "/_app-layout/dictionary/edit/$wordId"
      ]
    },
    "/_layout": {
      "filePath": "_layout/route.tsx",
      "children": [
        "/_layout/login"
      ]
    },
    "/_search-layout": {
      "filePath": "_search-layout/route.tsx",
      "children": [
        "/_search-layout/"
      ]
    },
    "/_layout/login": {
      "filePath": "_layout/login/route.tsx",
      "parent": "/_layout"
    },
    "/_app-layout/decks": {
      "filePath": "_app-layout/decks/route.lazy.tsx",
      "parent": "/_app-layout"
    },
    "/_app-layout/settings": {
      "filePath": "_app-layout/settings/route.lazy.tsx",
      "parent": "/_app-layout"
    },
    "/_search-layout/": {
      "filePath": "_search-layout/index.lazy.tsx",
      "parent": "/_search-layout"
    },
    "/_app-layout/dictionary/add": {
      "filePath": "_app-layout/dictionary/add/route.lazy.tsx",
      "parent": "/_app-layout"
    },
    "/_app-layout/dictionary/edit/$wordId": {
      "filePath": "_app-layout/dictionary/edit/$wordId.tsx",
      "parent": "/_app-layout"
    }
  }
}
ROUTE_MANIFEST_END */
